---
title: "Data Collection"
format: html
editor: visual
---

```{r}
#| include: false
#| warning: false

# Load Libraries
libraries <- c("janitor", "tidyverse", "sf", "here", "shiny")
lapply(libraries, function(x) {
    if (!require(x, character.only = TRUE)) {
        install.packages(x)
        library(x, character.only = TRUE)
    }
})


```

```{r}
# Function to Read Shapefiles and Check/Reproject CRS
read_shapefile_and_check_crs <- function(file_path, target_crs_epsg = 2229) { # EPSG code for NAD83
    sf_object <- st_read(here(file_path))
    
    # Check if CRS EPSG code is not the target CRS EPSG code
    current_crs_epsg <- st_crs(sf_object)$epsg
    if (!is.na(current_crs_epsg) && current_crs_epsg != target_crs_epsg) {
        message("Reprojecting ", file_path, " from EPSG:", current_crs_epsg, " to EPSG:", target_crs_epsg)
        sf_object <- st_transform(sf_object, crs = target_crs_epsg)
    } else {
        message(file_path, " is already in the target CRS (EPSG:", target_crs_epsg, ").")
    }
    
    return(sf_object)
}





```

```{r}
# Initialize a vector to store variable names
created_variables <- c()

# Function to create a variable name from a filename
create_var_name <- function(filename) {
  gsub("\\.shp$", "", basename(filename))
}

# Iterate through each subfolder in the 'data' directory
subfolders <- list.dirs(here("data"), full.names = TRUE, recursive = FALSE)
for (folder in subfolders) {
  # List all shapefiles in the subfolder
  shapefiles <- list.files(folder, pattern = "\\.shp$", full.names = TRUE)
  
  # Read each shapefile and assign to a variable
  for (shapefile in shapefiles) {
    var_name <- create_var_name(shapefile)
    assign(var_name, read_shapefile_and_check_crs(shapefile))
    created_variables <- c(created_variables, var_name)
  }
}


```

```{r}
# Print the created variable names
"Variables created for shapefiles:"
created_variables
```

```{r}
# RShiny

# UI
ui <- fluidPage(
    titlePanel("Shapefile Column Selector"),
    sidebarLayout(
        sidebarPanel(
            selectInput("shapefile", "Select a Shapefile:", choices = created_variables),
            uiOutput("column_selector")
        ),
        mainPanel(
            tableOutput("selected_data")
        )
    )
)

# Server logic
server <- function(input, output, session) {
    
    # Update column selector based on selected shapefile
    output$column_selector <- renderUI({
        req(input$shapefile)
        shapefile <- get(input$shapefile)
        checkboxGroupInput("columns", "Select Columns:", choices = names(shapefile))
    })

    # Observe changes in the selected shapefile and update available columns
    observe({
        shapefile <- get(input$shapefile)
        updateCheckboxGroupInput(session, "columns", 
                                 choices = names(shapefile), selected = NULL)
    })

    # Render the table based on selected columns
    output$selected_data <- renderTable({
        req(input$shapefile, input$columns)
        shapefile <- get(input$shapefile)
        
        # Handle spatial data (sf objects) by converting to a regular data frame
        if ("sf" %in% class(shapefile)) {
            shapefile <- as.data.frame(shapefile)
        }
        
        # Safely select columns, avoiding errors if columns don't exist
        safe_cols <- intersect(input$columns, names(shapefile))
        shapefile[, safe_cols, drop = FALSE]
    }, error = function(e) { 
        # Handle errors in table rendering
        "Error in rendering table"
    })
}

# Run the app
shinyApp(ui, server)

```

```{r}

# Define the UI
ui <- fluidPage(
    titlePanel("Shapefile Data Processor"),
    sidebarLayout(
        sidebarPanel(
            selectInput("shapefile", "Select a Shapefile:", choices = created_variables),
            uiOutput("column_selector"),
            textInput("agency", "Agency", ""),
            textInput("dtAcqrd", "Date Acquired", ""),
            textInput("tfDays", "Timeframe (Days)", ""),
            textInput("prjctNm", "Project Name", ""),
            textInput("TrtmnT", "Treatment", ""),
            textInput("dtComplt", "Date Completed", ""),
            textInput("other", "Other", ""),
            actionButton("process", "Process Shapefile")
        ),
        mainPanel(
            tableOutput("processed_data")
        )
    )
)

# Define server logic
server <- function(input, output, session) {
    
    # Reactive value to store the cumulative dataset
    cumulative_data <- reactiveVal(data.frame())

    # Update column selector based on selected shapefile
    output$column_selector <- renderUI({
        req(input$shapefile)
        shapefile <- get(input$shapefile)
        checkboxGroupInput("columns", "Select Columns:", choices = names(shapefile))
    })

    # Process the shapefile when the button is clicked
    observeEvent(input$process, {
        req(input$shapefile, input$columns)
        shapefile <- get(input$shapefile) %>% select(all_of(input$columns))

        # Create a new tibble with user inputs and selected columns
        new_data <- tibble(
            OrgnlSN = input$shapefile,
            Agency = input$agency,
            DtAcqrd = input$dtAcqrd,
            Acreage = shapefile$Acres,  # Assuming 'Acres' is a common column
            TF_DYS = input$tfDays,
            PrjctNm = input$prjctNm,
            DtComplt = input$dtComplt,
            Other = input$other
        )

        # Append to the cumulative dataset
        cumulative_data(bind_rows(cumulative_data(), new_data))
    })

    # Display the processed data
    output$processed_data <- renderTable({
        cumulative_data()
    })
}

# Run the app
shinyApp(ui, server)
```

```{r}
standard_columns <- c( "Agency", "DtAcqrd", "Acreage", "TF(DYS)", "PrjctNm", "DtComplt", "Other")

ui <- fluidPage(
    titlePanel("Shapefile Data Processor"),
    sidebarLayout(
        sidebarPanel(
            selectInput("shapefile", "Select a Shapefile:", choices = created_variables),
            uiOutput("column_mapping_ui"),
            actionButton("process", "Process Shapefile")
        ),
        mainPanel(
            tableOutput("processed_data")
        )
    )
)

server <- function(input, output, session) {
    
    # Reactive value to store the cumulative dataset
    cumulative_data <- reactiveVal(data.frame())

    # Update column mapping UI based on selected shapefile
    output$column_mapping_ui <- renderUI({
        req(input$shapefile)
        shapefile <- get(input$shapefile)
        shapefile_cols <- names(shapefile)

        # Create UI elements for each standard column
        map_ui <- lapply(standard_columns, function(col) {
            fluidRow(
                column(6, selectInput(paste0("select_", col), 
                                      label = paste("Map", col, "to:"), 
                                      choices = c("Enter value", shapefile_cols))),
                column(6, textInput(paste0("text_", col), 
                                    label = paste("Or enter value for", col), 
                                    value = ""))
            )
        })
        do.call(tagList, map_ui)
    })

    # Process the shapefile when the button is clicked
    observeEvent(input$process, {
        req(input$shapefile)
        shapefile <- get(input$shapefile)

        # Function to get value or mapped column
        get_value_or_column <- function(col_name, shapefile) {
            select_input <- input[[paste0("select_", col_name)]]
            text_input <- input[[paste0("text_", col_name)]]
            
            if(select_input != "Enter value") {
                return(shapefile[[select_input]])
            } else {
                return(rep(text_input, nrow(shapefile)))
            }
        }

        # Create a new tibble with user inputs and selected columns
        new_data <- tibble(
            OrgnlSN = input$shapefile,
            Agency = get_value_or_column("Agency", shapefile),
            DtAcqrd = get_value_or_column("DtAcqrd", shapefile),
            Acreage = get_value_or_column("Acreage", shapefile),
            `TF(DYS)` = get_value_or_column("TF(DYS)", shapefile),
            PrjctNm = get_value_or_column("PrjctNm", shapefile),
            DtComplt = get_value_or_column("DtComplt", shapefile),
            Other = get_value_or_column("Other", shapefile)
        )

        # Append to the cumulative dataset
        cumulative_data(bind_rows(cumulative_data(), new_data))
    })

    # Display the processed data
    output$processed_data <- renderTable({
        cumulative_data()
    })
}

# Run the app
shinyApp(ui, server)

```

```{r}
standard_columns <- c( "Agency", "DtAcqrd", "Acreage", "TF(DYS)", "PrjctNm", "DtComplt", "Other")

ui <- fluidPage(
    titlePanel("Shapefile Data Processor"),
    sidebarLayout(
        sidebarPanel(
            selectInput("shapefile", "Select a Shapefile:", choices = created_variables),
            uiOutput("column_mapping_ui"),
            actionButton("process", "Process Shapefile")
        ),
        mainPanel(
            tableOutput("data_preview"),
            tableOutput("processed_data")
        )
    )
)

server <- function(input, output, session) {
    
    # Reactive value to store the cumulative dataset
    cumulative_data <- reactiveVal(data.frame())

    # Preview the data of the selected shapefile
    output$data_preview <- renderTable({
        req(input$shapefile)
        shapefile <- get(input$shapefile)
        head(shapefile)  # Show first few rows
    })

    # Update column mapping UI based on selected shapefile
    output$column_mapping_ui <- renderUI({
        req(input$shapefile)
        shapefile <- get(input$shapefile)
        shapefile_cols <- c("Enter value manually", names(shapefile))

        # Create UI elements for each standard column
        map_ui <- lapply(standard_columns, function(col) {
            selectInput(paste0("map_", col), 
                        label = paste("Map", col, "to:"), 
                        choices = shapefile_cols)
        })
        do.call(tagList, map_ui)
    })

    # Process the shapefile when the button is clicked
    observeEvent(input$process, {
        req(input$shapefile)
        shapefile <- get(input$shapefile)

        # Function to get value or mapped column
        get_value_or_column <- function(col_name, shapefile) {
            map_input <- input[[paste0("map_", col_name)]]
            
            if(map_input == "Enter value manually") {
                return(rep(NA, nrow(shapefile)))  # Replace with user input if needed
            } else {
                return(shapefile[[map_input]])
            }
        }

        # Create a new tibble with user inputs and selected columns
        new_data <- tibble(
            OrgnlSN = input$shapefile,
            Agency = get_value_or_column("Agency", shapefile),
            DtAcqrd = get_value_or_column("DtAcqrd", shapefile),
            Acreage = get_value_or_column("Acreage", shapefile),
            `TF(DYS)` = get_value_or_column("TF(DYS)", shapefile),
            PrjctNm = get_value_or_column("PrjctNm", shapefile),
            DtComplt = get_value_or_column("DtComplt", shapefile),
            Other = get_value_or_column("Other", shapefile)
        )

        # Append to the cumulative dataset
        try({
            cumulative_data(bind_rows(cumulative_data(), new_data))
        }, silent = TRUE)
    })

    # Display the processed data
    output$processed_data <- renderTable({
        cumulative_data()
    })
}

# Run the app
shinyApp(ui, server)

```

```{r}
ui <- fluidPage(
    titlePanel("Shapefile Data Processor"),
    sidebarLayout(
        sidebarPanel(
            selectInput("shapefile", "Select a Shapefile:", choices = created_variables),
            uiOutput("column_mapping_ui"),
            actionButton("process", "Process Shapefile"),
            actionButton("create_shapefile", "Create New Shapefile")
        ),
        mainPanel(
            tableOutput("data_preview"),
            tableOutput("processed_data")
        )
    )
)
server <- function(input, output, session) {
    
    # Reactive value to store the cumulative dataset
    cumulative_data <- reactiveVal(data.frame())

    # Preview the data of the selected shapefile, excluding the geometry column
    output$data_preview <- renderTable({
        req(input$shapefile)
        shapefile <- get(input$shapefile)
        if ("sf" %in% class(shapefile)) {
            shapefile <- as.data.frame(shapefile)
        }
        head(shapefile[setdiff(names(shapefile), "geometry")])
    })

    # Update column mapping UI based on selected shapefile
    output$column_mapping_ui <- renderUI({
        req(input$shapefile)
        shapefile <- get(input$shapefile)
        shapefile_cols <- c("Enter value manually", setdiff(names(shapefile), "geometry"))

        # Create UI elements for each standard column
        map_ui <- lapply(standard_columns, function(col) {
            selectInput(paste0("map_", col), 
                        label = paste("Map", col, "to:"), 
                        choices = shapefile_cols)
        })
        do.call(tagList, map_ui)
    })

    # Process the shapefile when the button is clicked
    observeEvent(input$process, {
        req(input$shapefile)
        shapefile <- get(input$shapefile)

        # Function to get value or mapped column
        get_value_or_column <- function(col_name, shapefile) {
            map_input <- input[[paste0("map_", col_name)]]
            
            if(map_input == "Enter value manually") {
                return(rep(NA, nrow(shapefile)))  # Replace with user input if needed
            } else {
                return(shapefile[[map_input]])
            }
        }

        # Create a new tibble with user inputs and selected columns
        new_data <- tibble(
            OrgnlSN = input$shapefile,
            Agency = get_value_or_column("Agency", shapefile),
            DtAcqrd = get_value_or_column("DtAcqrd", shapefile),
            Acreage = get_value_or_column("Acreage", shapefile),
            `TF(DYS)` = get_value_or_column("TF(DYS)", shapefile),
            PrjctNm = get_value_or_column("PrjctNm", shapefile),
            DtComplt = get_value_or_column("DtComplt", shapefile),
            Other = get_value_or_column("Other", shapefile)
        )

        # Append to the cumulative dataset
        try({
            cumulative_data(bind_rows(cumulative_data(), new_data))
        }, silent = TRUE)
    })

    # Handle the creation of a new shapefile
    observeEvent(input$create_shapefile, {
        # Logic to create a new shapefile based on the processed data
        # This will be implemented as per your requirements
    })

    # Display the processed data
    output$processed_data <- renderTable({
        cumulative_data()
    })
}

# Run the app
shinyApp(ui, server)

```

```{r}
# Define the standard columns
standard_columns <- c("Agency", "DtAcqrd", "Acreage", "TF(DYS)", "PrjctNm", "TrtmntT", "DtComplt", "Other")

# UI with Dynamic Text Inputs
ui <- fluidPage(
    titlePanel("Shapefile Data Processor"),
    sidebarLayout(
        sidebarPanel(
            selectInput("shapefile", "Select a Shapefile:", choices = created_variables),
            uiOutput("column_mapping_ui"),
            actionButton("process", "Process Shapefile"),
            actionButton("create_shapefile", "Create New Shapefile")
        ),
        mainPanel(
            tableOutput("data_preview"),
            tableOutput("processed_data")
        )
    )
)

server <- function(input, output, session) {
    
    # Reactive value to store the cumulative dataset
    cumulative_data <- reactiveVal(data.frame())

    # Preview the data of the selected shapefile, excluding the geometry column
    output$data_preview <- renderTable({
        req(input$shapefile)
        shapefile <- get(input$shapefile)
        if ("sf" %in% class(shapefile)) {
            shapefile <- as.data.frame(shapefile)
        }
        head(shapefile[setdiff(names(shapefile), "geometry")])
    })

     # Update column mapping UI based on selected shapefile
    output$column_mapping_ui <- renderUI({
        req(input$shapefile)
        shapefile <- get(input$shapefile)
        shapefile_cols <- setdiff(names(shapefile), "geometry")

        map_ui <- lapply(standard_columns, function(col) {
            select_id <- paste0("map_", col)
            text_id <- paste0("text_", col)
            fluidRow(
                column(6, selectInput(select_id, label = paste("Map", col, "to:"), 
                                      choices = c("Null", shapefile_cols, "Enter value manually"))),
                column(6, uiOutput(text_id))  # Dynamic UI for text input
            )
        })
        do.call(tagList, map_ui)
    })

    # Dynamic text input based on dropdown selection
    lapply(standard_columns, function(col) {
        output[[paste0("text_", col)]] <- renderUI({
            select_id <- paste0("map_", col)
            if(!is.null(input[[select_id]]) && input[[select_id]] == "Enter value manually") {
                textInput(paste0("manual_", col), label = paste("Enter value for", col), value = "")
            }
        })
    })


    # Process the shapefile when the button is clicked
    observeEvent(input$process, {
        req(input$shapefile)
        shapefile <- get(input$shapefile)

        # Function to get value or mapped column
        get_value_or_column <- function(col_name, shapefile) {
            map_input <- input[[paste0("map_", col_name)]]
            manual_input <- input[[paste0("manual_", col_name)]]
            
            if(map_input == "Enter value manually") {
                # Use the manual input if "Enter value manually" is selected
                return(rep(manual_input, nrow(shapefile)))
            } else if(map_input != "Null") {
                # Use the selected column from the shapefile
                return(shapefile[[map_input]])
            } else {
                # Return NA if "Null" is selected
                return(rep(NA, nrow(shapefile)))
            }
        }

        # Create a new tibble with user inputs and selected columns
        new_data <- tibble(
            OrgnlSN = input$shapefile,
            Agency = get_value_or_column("Agency", shapefile),
            DtAcqrd = get_value_or_column("DtAcqrd", shapefile),
            Acreage = get_value_or_column("Acreage", shapefile),
            `TF(DYS)` = get_value_or_column("TF(DYS)", shapefile),
            PrjctNm = get_value_or_column("PrjctNm", shapefile),
            TrtmntT = get_value_or_column("TrtmntT", shapefile),
            DtComplt = get_value_or_column("DtComplt", shapefile),
            Other = get_value_or_column("Other", shapefile)
        )

        # Append to the cumulative dataset
        try({
            cumulative_data(bind_rows(cumulative_data(), new_data))
        }, silent = TRUE)
    })

   # Handle the creation of a new shapefile
    observeEvent(input$create_shapefile, {
        # Get the processed data
        processed_data <- cumulative_data()

        # Ensure there is data to process
        if (nrow(processed_data) == 0) {
            showModal(modalDialog(
                title = "No Data",
                "There is no processed data to create a shapefile."
            ))
            return()
        }

        # Create a list to store geometries
        geometries_list <- list()

        # Loop through unique values in OrgnlSN and get corresponding geometries
        for (sn in unique(processed_data$OrgnlSN)) {
            original_shapefile <- get(sn)
            # Assuming the original shapefiles are 'sf' objects
            if ("sf" %in% class(original_shapefile)) {
                geometries_list[[sn]] <- original_shapefile$geometry
            }
        }

        # Combine the geometries
        combined_geometry <- do.call(rbind, geometries_list)

        # Create a new shapefile with the combined geometries
        new_shapefile <- st_sf(processed_data, geometry = st_sfc(combined_geometry))
        st_write(new_shapefile, "new_shapefile.shp")

        showModal(modalDialog(
            title = "Success",
            "New shapefile created successfully."
        ))
    })

    # Display the processed data
    output$processed_data <- renderTable({
        cumulative_data()
    })
}

# Run the app
shinyApp(ui, server)
```

# Function to Select Columns

select_columns \<- function(sf_object, columns) { select(sf_object, all_of(columns)) }

# Function to Mutate Columns

mutate_columns \<- function(sf_object, ...) { mutate(sf_object, ...) }

# Function to Rename Columns

rename_columns \<- function(sf_object, ...) { rename(sf_object, ...) }

# Function to Merge Data

merge_data \<- function(...) { bind_rows(...) }

# Function to Export Data

export_data \<- function(data, file_name) { st_write(data, paste0(file_name, ".shp")) st_write(data, paste0(file_name, ".csv")) }

# File Paths

file_paths \<- list( graz = "/Users/daniellopez/Downloads/Internship Data Packs/Projects_Grazing.shp", veg_comp = "/Users/daniellopez/Downloads/Internship Data Packs/SB_City_Completed_Veg_Projects.shp", \# Add other file paths here )

# Read Shapefiles

graz_sf \<- read_shapefile(file_paths$graz) veg_comp_sf <- read_shapefile(file_paths$veg_comp) \# Read other shapefiles similarly

# Re-project CRS, Select, Mutate, Rename for each shapefile

# Use the functions created above

# Merging Data

merge_1 \<- merge_data(graz_sf, mixed_sf) \# Other merges

# Exporting Data

export_data(merge_6, "Final_Merge")

# Continue with other operations...

\`\`\`
